name: Infra and DevOps VM deployment using CLI
on: [workflow_dispatch]

env: 
  RESOURCE_GROUP_NAME: DevOps-ToolsV2
  LOCATION: eastus
  MANAGED_IDENTITY_NAME: devOps-ToolsVm-identityV2
  KEY_VAULT_NAME: DevOps-gdf-Kv8
  VM_NAME: DevOps-ToolsVm
  VM_SIZE: Standard_D2s_v3
  IMAGE_REF_PUBLISHER: MicrosoftWindowsDesktop
  IMAGE_REF_OFFER: windows-11
  IMAGE_REF_SKU: win11-24h2-pro
  IMAGE_REF_VERSION: latest
permissions:
  contents: read
  id-token: write
jobs:
    deploy-rg:
      name: Deploy Resource Group using Bicep
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3

        - uses: azure/login@v1
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
        - name: Deploy Bicep template to subscription
          run: |
            az deployment sub create \
              --name deploy-rg-module \
              --location eastus \
              --template-file ./avm/res/resources/resource-group/main-rg.bicep \
              --only-show-errors
    deploy-Vnet:
      name: Deploy VNet using Bicep
      runs-on: ubuntu-latest
      needs: deploy-rg
      steps:
        - uses: actions/checkout@v3

        - uses: azure/login@v1
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
        - name: Deploy Vnet using BICEP
          run: |
            az deployment group create \
              --name deploy-vnet-module \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --template-file ./avm/res/network/virtual-network/main-vnet.bicep \
              --parameters @./avm/res/network/virtual-network/main-vnet.parameters.json \
              --only-show-errors
    
    deploy-Managed-Identity:
      name: Deploy Managed Identity using Bicep
      runs-on: ubuntu-latest
      needs: deploy-rg
      steps:
        - uses: actions/checkout@v3

        - uses: azure/login@v1
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
        - name: Deploy Managed Identity using BICEP
          run: |
            az deployment group create \
              --name deploy-managed-identity-module \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --template-file ./avm/res/managed-identity/user-assigned-identity/devopsTools-mi.bicep \
              --parameters miName=${{ env.MANAGED_IDENTITY_NAME }} \
              --only-show-errors
  
    deploy-KV:
      name: Deploy Key Vault using Bicep
      runs-on: ubuntu-latest
      needs: 
        - deploy-Managed-Identity
        - deploy-Vnet
      steps:
        - uses: actions/checkout@v3

        - uses: azure/login@v1
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
        - name: Set secrets as environment variables
          run: echo "DEVOPS_VM_SECRET=${{ secrets.DEVOPS_VM_SECRET }}" >> $GITHUB_ENV

        - name: Get Managed Identity principalId and set as environment variable
          id: get-mi
          run: |
            MI_NAME="${{ env.MANAGED_IDENTITY_NAME }}"
            RG_NAME="${{ env.RESOURCE_GROUP_NAME }}"

            PRINCIPAL_ID=$(az identity show --name "$MI_NAME" --resource-group "$RG_NAME" --query 'principalId' -o tsv)

            echo "PRINCIPAL_ID=$PRINCIPAL_ID" >> $GITHUB_ENV


        - name: Generate parameters file
          shell: pwsh
          run: |
            $json = @{
              '$schema' = 'https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#'
              contentVersion = '1.0.0.0'
              parameters = @{
                name = @{
                  value = $env:KEY_VAULT_NAME
                }
                secrets = @{
                  value = @(
                    @{
                      name = 'DevOps-Vm-Secret'
                      value = $env:DEVOPS_VM_SECRET
                      attributes = @{ enabled = $true }
                      tags = @{
                        'created-by' = 'GitHub Actions'
                        'kv-purpose' = 'Secret for DevOps VM'
                      }
                    }
                  )
                }
                roleAssignments = @{
                  value = @(
                    @{
                      principalId = $env:PRINCIPAL_ID
                      roleDefinitionIdOrName = 'Key Vault Secrets User'
                      description = 'DevOps VM Identity'
                      principalType = 'ServicePrincipal'
                    }
                    @{
                      principalId = '75e8c793-8646-411a-b342-7a1a4c53620d'
                      roleDefinitionIdOrName = 'Key Vault Administrator'
                      description = 'DevOps VM Identity with elevated permissions'
                      principalType = 'User'
                    }  
                  )
                }
              }
            }

            $json | ConvertTo-Json -Depth 10 | Set-Content -Path 'kv.params.json' -Encoding utf8

        - name: Validate Key Vault deployment
          run: |
            az deployment group validate \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --template-file './avm/res/key-vault/vault/devops-kv2.bicep' \
              --parameters @kv.params.json \
              --debug

        - name: Deploy Key Vault using BICEP
          run: |
            az deployment group create \
              --name 'kvDeployment' \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --template-file './avm/res/key-vault/vault/devops-kv2.bicep' \
              --parameters @kv.params.json \
              --only-show-errors  

    deploy-VM:               
      name: Deploy VM using Bicep
      runs-on: ubuntu-latest
      needs: deploy-KV
      steps:
        - uses: actions/checkout@v3

        - uses: azure/login@v1
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
        - name: Generate VM Parameters JSON
          shell: pwsh
          run: |
            $vmParams = @{
              '$schema' = 'https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#'
              contentVersion = '1.0.0.0'
              parameters = @{
                name = @{ value = $env:VM_NAME }
                vmSize = @{ value = $env:VM_SIZE }
                encryptionAtHost = @{ value = $false }
                securityType = @{ value = '' }
                secureBootEnabled = @{ value = $false }
                vTpmEnabled = @{ value = $false }
                imageReference = @{
                  value = @{
                    publisher = $env:IMAGE_REF_PUBLISHER
                    offer = $env:IMAGE_REF_OFFER
                    sku = $env:IMAGE_REF_SKU
                    version = $env:IMAGE_REF_VERSION
                  } 
                }
                osDisk = @{
                  value = @{
                    name = 'osDisk'
                    caching = 'ReadWrite'
                    createOption = 'FromImage'
                    managedDisk = @{
                      storageAccountType = 'Standard_LRS'
                    }
                    diskSizeGB = 128
                  }
                }
                ultraSSDEnabled = @{ value = $false }
                hibernationEnabled = @{ value = $false }  
                adminUsername = @{ value = 'AzureUser' }
                adminPassword = @{
                  reference = @{
                    keyVault = @{ id = "/subscriptions/58a4a8cd-3b3b-4fcc-ad44-d7bf8c3df844/resourceGroups/DevOps-ToolsV2/providers/Microsoft.KeyVault/vaults/DevOps-gdf-Kv8" }
                    secretName = "DevOps-Vm-Secret"
                  }
                }  
                evictionPolicy = @{ value = 'Deallocate' }
                maxPriceForLowPriorityVm = @{ value = '' }
                dedicatedHostId = @{ value = '' }
                licenseType = @{ value = '' }
                publicKeys = @{ value = @() }
                nicConfigurations = @{
                  value = @(
                    @{
                      ipConfigurations = @(
                        @{
                          name = 'ipconfig1'
                          privateIPAllocationMethod = 'Dynamic'
                          subnetResourceId = "/subscriptions/58a4a8cd-3b3b-4fcc-ad44-d7bf8c3df844/resourceGroups/DevOps-ToolsV2/providers/Microsoft.Network/virtualNetworks/DevOps-NetworkV2/subnets/DevSubnet"
                          privateIPAddressVersion = 'IPv4'
                          primary = $true
                        }
                      )
                    }
                  )  
                }
                managedIdentities = @{
                  value = @{
                    systemAssigned = $true
                    userAssignedResourceIds = @(
                      "/subscriptions/58a4a8cd-3b3b-4fcc-ad44-d7bf8c3df844/resourcegroups/DevOps-ToolsV2/providers/Microsoft.ManagedIdentity/userAssignedIdentities/devOps-ToolsVm-identityV2"
                    )
                  }
                }
                galleryApplications = @{ value = @() }
                backupVaultName = @{ value = '' }
                backupPolicyName = @{ value = 'DefaultPolicy' }  
                maintenanceConfigurationResourceId = @{ value = '' }
                extensionDomainJoinPassword = @{ value = '' }
                extensionDomainJoinConfig = @{ value = @{} }
                extensionAadJoinConfig = @{ 
                  value = @{
                    enabled = $false
                  } 
                }
                extensionAntiMalwareConfig = @{ 
                  value = @{
                    enabled = $false 
                  }
                }
                zone = @{ value = 0 }
                osType = @{ value = 'Windows' }
                disablePasswordAuthentication = @{ value = $false }
                enableTelemetry = @{ value = $false }
                sasTokenValidityLength = @{ value = 'PT8H' }
                provisionVMAgent = @{ value = $false }
                enableAutomaticUpdates = @{ value = $false }
                patchMode = @{ value = '' }
                bypassPlatformSafetyChecksOnUserSchedule = @{ value = $true }
                rebootSetting = @{ value = 'IfRequired' }
                patchAssessmentMode = @{ value = 'ImageDefault' }
                enableHotpatching = @{ value = $false }
                additionalUnattendContent = @{ value = @() }
                winRMListeners = @{ value = @() }
                timeZone = @{ value = 'Eastern Standard Time' }
                configurationProfile = @{ value = '' }
                autoShutdownConfig = @{
                  value = @{
                    status = 'Enabled'
                    timezone = 'Eastern Standard Time'
                    dailyRecurrenceTime = '22:00'
                    notificationSettings = @{
                      status = 'Enabled'
                      emailRecipient = 'gabrielford@microsoft.com'
                      emailStatus = 'Enabled'
                      webhookResourceId = ''
                    }
                  }
                }
              }
            }

            $vmParams | ConvertTo-Json -Depth 10 | Set-Content -Path vm.parameters.json -Encoding utf8

        - name: Deploy VM using Bicep
          shell: bash
          run: |
            az deployment group create \
              --name vm-deployment \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --template-file './avm/res/compute/virtual-machine/devops-vm.bicep' \
              --parameters @vm.parameters.json \
              --debug 
        