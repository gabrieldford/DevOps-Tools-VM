name: Infra and DevOps VM deployment using CLI
on: [workflow_dispatch]

env: 
  RESOURCE_GROUP_NAME: DevOps-ToolsV2
  LOCATION: eastus
  SUBNET_NAME: DevSubnet
  MANAGED_IDENTITY_NAME: devOps-ToolsVm-identityV2
  KEY_VAULT_NAME: DevOps-gdf-Kv12
  KEY_VAULT_PE_IP: '10.0.0.7'
  VM_NAME: DevOps-ToolsVm
  VM_SIZE: Standard_D2s_v3
  IMAGE_REF_PUBLISHER: MicrosoftWindowsDesktop
  IMAGE_REF_OFFER: windows-11
  IMAGE_REF_SKU: win11-24h2-pro
  IMAGE_REF_VERSION: latest
  OS_DISK_NAME: osDisk
  OS_DISK_CACHING: ReadWrite
  OS_DISK_CREATE_OPTION: FromImage
  OS_DISK_MANAGED_DISK_TYPE: Standard_LRS
  OS_DISK_SIZE_GB: 128
  ADMIN_USERNAME: AzureUser
  EVICTION_POLICY: Deallocate
  max_PRICE_FOR_LOW_PRIORITY_VM: ""
  DEDICATED_HOST_ID: ""
  LICENSE_TYPE: ""
  IP_CONFIG_NAME: ipconfig1
  IP_CONFIG_PRIVATE_IP_ALLOCATION: Dynamic
  IP_CONFIG_IP_VERSION: IPv4
  IP_CONFIG_VNET_NAME: DevOps-NetworkV2
  IP_CONFIG_SUBNET_NAME: DevSubnet
  BACKUP_VAULT_NAME: ""
  BACKUP_POLICY_NAME: DefaultPolicy
  MAINTENANCE_CONFIG_RID: ""
  EXTENSION_DOMAIN_JOIN_PASSWORD: ""
  ZONE: 0
  OS_TYPE: Windows
  SAS_TOKEN_VALIDITY_LENGTH: PT8H
  PATCH_MODE: ""
  REBOOT_SETTING: IfRequired
  PATCH_ASSESSMENT_MODE: ImageDefault
  TIME_ZONE: Eastern Standard Time
  CONFIGURATION_PROFILE: ""
  AUTO_SHUTDOWN_STATUS: Enabled
  AUTO_SHUTDOWN_TIMEZONE: Eastern Standard Time
  AUTO_SHUTDOWN_DAILY_RECURRENCE_TIME: '22:00'
  AUTO_SHUTDOWN_NOTIFICATION_STATUS: Enabled
  AUTO_SHUTDOWN_EMAIL_RECIPIENT: gabrielford@microsoft.com
  AUTO_SHUTDOWN_EMAIL_STATUS: Enabled
  AUTO_SHUTDOWN_WEBHOOK_RESOURCE_ID: ""
  STORAGE_ACCOUNT_NAME: devopsgdftestv3
  STORAGE_ACCOUNT_PE_IP: '10.0.0.6'



permissions:
  contents: read
  id-token: write
jobs:
    deploy-rg:
      name: Deploy Resource Group using Bicep
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3

        - uses: azure/login@v1
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
        - name: Deploy Bicep template to subscription
          run: |
            az deployment sub create \
              --name deploy-rg-module \
              --location eastus \
              --template-file ./avm/res/resources/resource-group/main-rg.bicep \
              --only-show-errors
    deploy-Vnet:
      name: Deploy VNet using Bicep
      runs-on: ubuntu-latest
      needs: deploy-rg
      steps:
        - uses: actions/checkout@v3

        - uses: azure/login@v1
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
        - name: Deploy Vnet using BICEP
          run: |
            az deployment group create \
              --name deploy-vnet-module \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --template-file ./avm/res/network/virtual-network/main-vnet.bicep \
              --parameters @./avm/res/network/virtual-network/main-vnet.parameters.json \
              --only-show-errors
    
    deploy-Managed-Identity:
      name: Deploy Managed Identity using Bicep
      runs-on: ubuntu-latest
      needs: deploy-rg
      steps:
        - uses: actions/checkout@v3

        - uses: azure/login@v1
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
        - name: Deploy Managed Identity using BICEP
          run: |
            az deployment group create \
              --name deploy-managed-identity-module \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --template-file ./avm/res/managed-identity/user-assigned-identity/devopsTools-mi.bicep \
              --parameters miName=${{ env.MANAGED_IDENTITY_NAME }} \
              --only-show-errors
  
    deploy-KV:
      name: Deploy Key Vault using Bicep
      runs-on: ubuntu-latest
      needs: 
        - deploy-Managed-Identity
        - deploy-Vnet
      steps:
        - uses: actions/checkout@v3

        - uses: azure/login@v1
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
        - name: Set secrets as environment variables
          run: echo "DEVOPS_VM_SECRET=${{ secrets.DEVOPS_VM_SECRET }}" >> $GITHUB_ENV

        - name: Get Managed Identity principalId and set as environment variable
          id: get-mi
          run: |
            MI_NAME="${{ env.MANAGED_IDENTITY_NAME }}"
            RG_NAME="${{ env.RESOURCE_GROUP_NAME }}"

            PRINCIPAL_ID=$(az identity show --name "$MI_NAME" --resource-group "$RG_NAME" --query 'principalId' -o tsv)

            echo "PRINCIPAL_ID=$PRINCIPAL_ID" >> $GITHUB_ENV


        - name: Generate parameters file
          shell: pwsh
          run: |
            $json = @{
              '$schema' = 'https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#'
              contentVersion = '1.0.0.0'
              parameters = @{
                name = @{
                  value = $env:KEY_VAULT_NAME
                }
                subnetName = @{
                  value = $env:SUBNET_NAME
                }
                keyVaultPrivateEndpointIp = @{
                  value = $env:KEY_VAULT_PE_IP
                }
                secrets = @{
                  value = @(
                    @{
                      name = 'DevOps-Vm-Secret'
                      value = $env:DEVOPS_VM_SECRET
                      attributes = @{ enabled = $true }
                      tags = @{
                        'created-by' = 'GitHub Actions'
                        'kv-purpose' = 'Secret for DevOps VM'
                      }
                    }
                  )
                }
                roleAssignments = @{
                  value = @(
                    @{
                      principalId = $env:PRINCIPAL_ID
                      roleDefinitionIdOrName = 'Key Vault Secrets User'
                      description = 'DevOps VM Identity'
                      principalType = 'ServicePrincipal'
                    }
                    @{
                      principalId = '75e8c793-8646-411a-b342-7a1a4c53620d'
                      roleDefinitionIdOrName = 'Key Vault Administrator'
                      description = 'DevOps VM Identity with elevated permissions'
                      principalType = 'User'
                    }  
                  )
                }
              }
            }

            $json | ConvertTo-Json -Depth 10 | Set-Content -Path 'kv.params.json' -Encoding utf8

        - name: Validate Key Vault deployment
          run: |
            az deployment group validate \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --template-file './avm/res/key-vault/vault/devops-kv2.bicep' \
              --parameters @kv.params.json \
              --debug

        - name: Deploy Key Vault using BICEP
          run: |
            az deployment group create \
              --name 'kvDeployment' \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --template-file './avm/res/key-vault/vault/devops-kv2.bicep' \
              --parameters @kv.params.json \
              --only-show-errors  

        - name: Deploy Key Vault Private DNS Zone
          run: |
            az deployment group create \
              --name 'kvDeploymentprivateDns' \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --template-file './avm/res/network/private-dns-zone/devops-kv-pe-dns.bicep' \
              --parameters \
                kvname=${{ env.KEY_VAULT_NAME }} \
                kvPeIpAddress=${{ env.KEY_VAULT_PE_IP }} \
              --debug 

    deploy-VM:               
      name: Deploy VM using Bicep
      runs-on: ubuntu-latest
      needs: deploy-KV
      steps:
        - uses: actions/checkout@v3

        - uses: azure/login@v1
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
        - name: Generate VM Parameters JSON
          shell: pwsh
          run: |
            $vmParams = @{
              '$schema' = 'https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#'
              contentVersion = '1.0.0.0'
              parameters = @{
                name = @{ value = $env:VM_NAME }
                vmSize = @{ value = $env:VM_SIZE }
                encryptionAtHost = @{ value = $false }
                securityType = @{ value = '' }
                secureBootEnabled = @{ value = $false }
                vTpmEnabled = @{ value = $false }
                imageReference = @{
                  value = @{
                    publisher = $env:IMAGE_REF_PUBLISHER
                    offer = $env:IMAGE_REF_OFFER
                    sku = $env:IMAGE_REF_SKU
                    version = $env:IMAGE_REF_VERSION
                  } 
                }
                osDisk = @{
                  value = @{
                    name = $env:OS_DISK_NAME
                    caching = $env:OS_DISK_CACHING
                    createOption = $env:OS_DISK_CREATE_OPTION
                    managedDisk = @{
                      storageAccountType = $env:OS_DISK_MANAGED_DISK_TYPE
                    }
                    diskSizeGB = [int]$env:OS_DISK_SIZE_GB
                  }
                }
                ultraSSDEnabled = @{ value = $false }
                hibernationEnabled = @{ value = $false }  
                adminUsername = @{ value = $env:ADMIN_USERNAME }
                adminPassword = @{
                  reference = @{
                    keyVault = @{ id = "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/$($env:RESOURCE_GROUP_NAME)/providers/Microsoft.KeyVault/vaults/$($env:KEY_VAULT_NAME)" }
                    secretName = "DevOps-Vm-Secret"
                  }
                }  
                evictionPolicy = @{ value = $env:EVICTION_POLICY }
                maxPriceForLowPriorityVm = @{ value = $env:max_PRICE_FOR_LOW_PRIORITY_VM }
                dedicatedHostId = @{ value = $env:DEDICATED_HOST_ID }
                licenseType = @{ value = $env:LICENSE_TYPE }
                publicKeys = @{ value = @() }
                nicConfigurations = @{
                  value = @(
                    @{
                      ipConfigurations = @(
                        @{
                          name = $env:IP_CONFIG_NAME
                          privateIPAllocationMethod = $env:IP_CONFIG_PRIVATE_IP_ALLOCATION
                          subnetResourceId = "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/$($env:RESOURCE_GROUP_NAME)/providers/Microsoft.Network/virtualNetworks/$($env:IP_CONFIG_VNET_NAME)/subnets/$($env:IP_CONFIG_SUBNET_NAME)"
                          privateIPAddressVersion = $env:IP_CONFIG_IP_VERSION
                          primary = $true
                        }
                      )
                    }
                  )  
                }
                managedIdentities = @{
                  value = @{
                    systemAssigned = $true
                    userAssignedResourceIds = @(
                      "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourcegroups/$($env:RESOURCE_GROUP_NAME)/providers/Microsoft.ManagedIdentity/userAssignedIdentities/$($env:MANAGED_IDENTITY_NAME)"
                    )
                  }
                }
                galleryApplications = @{ value = @() }
                backupVaultName = @{ value = $env:BACKUP_VAULT_NAME }
                backupPolicyName = @{ value = $env:BACKUP_POLICY_NAME }  
                maintenanceConfigurationResourceId = @{ value = $env:MAINTENANCE_CONFIG_RID }
                extensionDomainJoinPassword = @{ value = $env:EXTENSION_DOMAIN_JOIN_PASSWORD }
                extensionDomainJoinConfig = @{ value = @{} }
                extensionAadJoinConfig = @{ 
                  value = @{
                    enabled = $false
                  } 
                }
                extensionAntiMalwareConfig = @{ 
                  value = @{
                    enabled = $false 
                  }
                }
                zone = @{ value = [int]$env:ZONE }
                osType = @{ value = $env:OS_TYPE }
                disablePasswordAuthentication = @{ value = $false }
                enableTelemetry = @{ value = $false }
                sasTokenValidityLength = @{ value = $env:SAS_TOKEN_VALIDITY_LENGTH }
                provisionVMAgent = @{ value = $false }
                enableAutomaticUpdates = @{ value = $false }
                patchMode = @{ value = $env:PATCH_MODE }
                bypassPlatformSafetyChecksOnUserSchedule = @{ value = $true }
                rebootSetting = @{ value = $env:REBOOT_SETTING }
                patchAssessmentMode = @{ value = $env:PATCH_ASSESSMENT_MODE }
                enableHotpatching = @{ value = $false }
                additionalUnattendContent = @{ value = @() }
                winRMListeners = @{ value = @() }
                timeZone = @{ value = $env:TIME_ZONE }
                configurationProfile = @{ value = $env:CONFIGURATION_PROFILE }
                autoShutdownConfig = @{
                  value = @{
                    status = $env:AUTO_SHUTDOWN_STATUS
                    timezone = $env:AUTO_SHUTDOWN_TIMEZONE
                    dailyRecurrenceTime = $env:AUTO_SHUTDOWN_DAILY_RECURRENCE_TIME
                    notificationSettings = @{
                      status = $env:AUTO_SHUTDOWN_NOTIFICATION_STATUS
                      emailRecipient = $env:AUTO_SHUTDOWN_EMAIL_RECIPIENT
                      emailStatus = $env:AUTO_SHUTDOWN_EMAIL_STATUS
                      webhookResourceId = $env:AUTO_SHUTDOWN_WEBHOOK_RESOURCE_ID
                    }
                  }
                }
              }
            }

            $vmParams | ConvertTo-Json -Depth 10 | Set-Content -Path vm.parameters.json -Encoding utf8

        - name: Deploy VM using Bicep
          shell: bash
          run: |
            az deployment group create \
              --name vm-deployment \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --template-file './avm/res/compute/virtual-machine/devops-vm.bicep' \
              --parameters @vm.parameters.json \
              --debug 
    
    deploy-Bastion:
      name: Deploy Bastion Host using Bicep
      runs-on: ubuntu-latest
      needs: deploy-Vnet
      steps:
        - uses: actions/checkout@v3

        - uses: azure/login@v1
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
        - name: Deploy Bastion Host using Bicep
          run: |
            az deployment group create \
              --name 'bastionDeployment' \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --template-file './avm/res/network/bastion-host/devops-bastion.bicep' \
              --only-show-errors
      
    deploy-Storage:
      name: Deploy Storage Account and Private DNS Zone using Bicep
      runs-on: ubuntu-latest
      needs: deploy-Vnet

      steps:
        - uses: actions/checkout@v3

        - uses: azure/login@v1
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        - name: Get Managed Identity principalId and set as environment variable
          id: get-mi
          run: |
            MI_NAME="${{ env.MANAGED_IDENTITY_NAME }}"
            RG_NAME="${{ env.RESOURCE_GROUP_NAME }}"

            PRINCIPAL_ID=$(az identity show --name "$MI_NAME" --resource-group "$RG_NAME" --query 'principalId' -o tsv)

            echo "PRINCIPAL_ID=$PRINCIPAL_ID" >> $GITHUB_ENV    
        - name: Deploy Storage Account
          run: |
            az deployment group create \
              --name 'storageDeployment' \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --parameters \
                strname=${{ env.STORAGE_ACCOUNT_NAME }} \
                strPeIpAddress=${{ env.STORAGE_ACCOUNT_PE_IP }} \
                managedIdentityPrincipalId=$PRINCIPAL_ID \
              --template-file './avm/res/storage/storage-account/devops-str.bicep' \
              --debug

        - name: Deploy Storage Account Private DNS Zone
          run: |
            az deployment group create \
              --name 'storageDeploymentprivateDns' \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --template-file './avm/res/network/private-dns-zone/devops-str-pe-dns.bicep' \
              --parameters \
                strname=${{ env.STORAGE_ACCOUNT_NAME }} \
                strPeIpAddress=${{ env.STORAGE_ACCOUNT_PE_IP }} \
              --debug